const name = ' Mansoor Basha ';
console.log(name.length);
console.log(name.replace('Basha','Molla'));
console.log(name.concat(' Molla'));
console.log(name.charAt(0));
console.log(name.toLowerCase());
console.log(name.toUpperCase());
console.log(name.startsWith('Man')); // even check small and caps letter
console.log(name.endsWith('sha')); // should be plural starts and ends and sholud also be mindful of small & caps
console.log(name.includes('ans')); // should check given string pattern avilable in name and return t/f
console.log(name.search('n')); // will give index of character but be mindful of small and caps need to pass excatly
console.log(name.indexOf('n')); // will give index of character but be mindful of small and caps need to pass excatly
console.log(name.lastIndexOf('o')); 
console.log(name.split()); // convert string into single array element 
console.log(name.split('')); // convert string into n number of array element where nis equal to number of element in given string 
console.log(name.split(' ')); // convert string into n array element where n is number of spaces in given string
console.log(name.repeat(3)); // will repeat with given number of times
console.log(name.substring(0,7)); // its not camelcase (s not caps after sub) and index will start from 0 and end excluded
console.log(name.substr(0,8)); // its not camelcase and parameters are (startingIndex, length);
console.log(name.padStart(15,'*')); // if total number of string length is 13 and if padStart with given length 15 mean starting 2 index will fill with given string
console.log(name.padEnd(15,'*'));
const trimLength = name.trim();
console.log(trimLength.length); // trim mean it wont eliminate middle spaces but after quotation mark or before end of quotation mark if have space it will elimminate



Sure, here are all the JavaScript string methods introduced till the latest version (ES2023), along with their arguments and purposes:

```javascript
const name = ' Mansoor Basha ';

// length: No arguments, returns the number of characters in a string.
console.log(name.length); 

// replace: Takes two arguments, the string to be replaced and the string to replace it with. Returns a new string with some or all matches of a pattern replaced by a replacement.
console.log(name.replace('Basha','Molla')); 

// concat: Takes one or more strings, returns a new string resulting from concatenating the given strings.
console.log(name.concat(' Molla')); 

// charAt: Takes an index, returns the character at the specified index in a string.
console.log(name.charAt(0)); 

// toLowerCase: No arguments, returns the calling string value converted to lowercase.
console.log(name.toLowerCase()); 

// toUpperCase: No arguments, returns the calling string value converted to uppercase.
console.log(name.toUpperCase()); 

// startsWith: Takes a string and an optional position, determines whether the calling string begins with the characters of a specified string at a specific position.
console.log(name.startsWith('Man')); 

// endsWith: Takes a string and an optional length, determines whether the calling string ends with the characters of a specified string of a certain length.
console.log(name.endsWith('sha')); 

// includes: Takes a string and an optional position, determines whether one string may be found within another string, returning true or false as appropriate.
console.log(name.includes('ans')); 

// search: Takes a regular expression object, executes a search for a match between a regular expression and this String object.
console.log(name.search('n')); 

// indexOf: Takes a string and an optional position, returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex.
console.log(name.indexOf('n')); 

// lastIndexOf: Takes a string and an optional position, returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex.
console.log(name.lastIndexOf('o')); 

// split: Takes a separator and a limit, divides a String into an ordered list of substrings, puts these substrings into an array, and returns the array.
console.log(name.split()); 
console.log(name.split('')); 
console.log(name.split(' ')); 

// repeat: Takes a count, constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.
console.log(name.repeat(3)); 

// substring: Takes a start and an optional end, returns a new string containing the characters of the string from (or between) the specified index (or indexes).
console.log(name.substring(0,7)); 

// substr: Takes a start and a length, returns a portion of the string, starting at the specified index and extending for a given number of characters afterwards.
console.log(name.substr(0,8)); 

// padStart: Takes a target length and an optional pad string, pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length.
console.log(name.padStart(15,'*')); 

// padEnd: Takes a target length and an optional pad string, pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length.
console.log(name.padEnd(15,'*')); 

// trim: No arguments, removes whitespace from both ends of a string.
const trimLength = name.trim();
console.log(trimLength.length); 

// trimStart / trimLeft: No arguments, removes whitespace from the beginning of a string.
console.log(name.trimStart().length); 

// trimEnd / trimRight: No arguments, removes whitespace from the end of a string.
console.log(name.trimEnd().length); 

// charCodeAt: Takes an index, returns a number that is the UTF-16 code unit value at the given index.
console.log(name.charCodeAt(0)); 

// codePointAt: Takes a position, returns a nonnegative integer Number that is the code point value of the UTF-16 encoded code point starting at the specified position.
console.log(name.codePointAt(0)); 

// normalize: Takes a form, returns the Unicode Normalization Form of the string.
console.log(name.normalize()); 

// localeCompare: Takes a compareString and optional locales and options, returns a number indicating whether the string comes before, after, or is the same as the compareString in sort order.
console.log(name.localeCompare(' Mansoor Basha ')); 

// match: Takes a regular expression, retrieves the result of matching a string against a regular expression.
console.log(name.match(/a/g)); 

// matchAll: Takes a regular expression, returns an iterator of all results matching a string against a regular expression, including capturing groups.
console.log([...name.matchAll(/a/g)]); 

// replaceAll: Takes a searchValue and a replaceValue, returns a new string with all matches of a pattern replaced by a replacement.
console.log(name.replaceAll('a', 'i')); 

// toLocaleLowerCase: No arguments, returns the calling string value converted to lower case, according to any locale-specific case mappings.
console.log(name.toLocaleLowerCase()); 

// toLocaleUpperCase: No arguments, returns the calling string value converted to upper case, according to any locale-specific case mappings.
console.log(name.toLocaleUpperCase()); 

// toLocaleString: No arguments, returns a string representing the elements of the array.
console.log(name.toLocaleString()); 

// valueOf: No arguments, returns the primitive value of a String object.
console.log(name.valueOf()); 
```

Remember, these methods do not mutate the original string, but instead create a new one²³⁶.

Source: Conversation with Copilot, 11/06/2024
(1) JavaScript String Methods - W3Schools. https://www.w3schools.com/js/js_string_methods.asp.
(2) String - JavaScript | MDN - MDN Web Docs. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String.
(3) Useful string methods - Learn web development | MDN. https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods.
(4) Common methods for manipulating strings in JavaScript. https://bing.com/search?q=JavaScript+string+methods.
(5) Javascript String Methods List (with Examples) - Tutorials Tonight. https://www.tutorialstonight.com/js/javascript-string-methods.
(6) JavaScript String Reference - W3Schools. https://www.w3schools.com/jsref/jsref_obj_string.asp.
(7) Exploring JavaScript String Methods: A Comprehensive Guide. https://dev.to/manthanank/exploring-javascript-string-methods-a-comprehensive-guide-49m0.
(8) JavaScript String Methods - JavaScript Tutorial. https://www.javascripttutorial.net/javascript-string-methods/.
(9) 13 Most Common JavaScript String Methods You Should Know About. https://shefali.dev/javascript-string-methods/.
(10) Getty Images. https://www.gettyimages.com/detail/photo/program-code-javascript-php-html-css-of-site-web-royalty-free-image/1202250586.