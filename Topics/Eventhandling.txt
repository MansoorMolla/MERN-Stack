/**
What is event and types of events in js?
Event is nothing but a action / change in state of object
in webpage also whatever ever do everything is an event

The change in the state of an object is known as an Event. 
In html, there are various events which represents that some activity is performed by the user or by the browser
When javascript code is included in HTML, js react over these events and allow the execution. 
This process of reacting over the events is called Event Handling. 
Thus, js handles the HTML events via Event Handlers.

who generates events
user > keypress,scroll,focus,...
system > load,error,abort,...

Types of user generated events 
Browser specific events > scrollup/down resize broswer
DOM/ web page specific > click , hover, focus 


What is event handler?
Event handler is a function we write to run when an event happened


Commonly used events in js 
Mouse Events : click, double click, mouse over, mouse out, mouse move
keyboardEvents: key down, key up, key press
Focus Events: focus, blur, focusin, focusout
Form Events: submit, reset, change 


Ways to handle events in js ?

1 Inline event handling (using event attributes in html)
    <button onclick="document.body.style.backgroundColor='red'">change color</button>


2 using event properties in javascript
    let btn = document.getElementById('b1);
    btn.onclick = function name/ anonymous function
    btn.onclick = change;
    function change(){
        document.body.style.backgroundColor = 'red';
    }


3 using addEventListener() in javascript
    let btn = document.getElementById('b1);
    btn.addEventListener(event_name,function_name/anonymous_function)
    btn.addEventListner('click',change);
    function change(){
        document.body.style.backgroundColor = 'red';
    }
    // here we dont give onclick but just simply will give click 


 */

// Event, Event handling, Event handler, Event Buggling, Event Capturing

Event : An event is an action that happens in the browser , such as
clicking a button, pressing a key, submitting a form, moving mouse, loading a page
The browser detect these events, and js allows you to listen for and respond to them


Event Handling: Event Handling is the process of listening to an event and executing a function when it happens.
Js provide addEventListener() to listen for events


example:

document.getElementById('mybutton').addEventListener('click',function(){alert('Button Clicked')});

here, the browser listens for a click on mybutton
when clicked, the function inside addEventListener() executes


Event Handler :
an event handler is the function that executes when an event occurs. there are 3 ways to define an event handler

1) Inline event handler 
<button onClick = 'alert('Button Clicked')'>Click Me</button>

2) javascript property (onclick)

document.getElementById('btn').onclick = function(){alert('Button Clicked')}

3) addEventListener()
document.getElementById('btn').addEventListener('click', function(){alert('Button Clicked')});

Event PreventDefault():
event.preventDefault() prevents the default action of an event. 

What is Event Propagation?
Event propagation is the way events travel through the DOM tree when an event occurs. It consists of three phases:

Capturing Phase (Event Capturing): The event starts from the root (document) and moves downward to the target element.
Target Phase: The event reaches the target element where the event listener is attached.
Bubbling Phase (Event Bubbling): The event moves upward from the target element back to the root (document).


What is Event Bubbling and Capturing?
Event Bubbling: The event starts at the target element and bubbles upward through its ancestors until it reaches the root (document).
Event Capturing (Trickling): The event starts from the root (document) and moves downward to the target element before being handled.

Rules for Event Bubbling and Capturing to Work Properly
Use addEventListener Properly:

By default, addEventListener listens in the bubbling phase.
To make it listen in the capturing phase, pass { capture: true }.
element.addEventListener("click", handler, { capture: true }); // Capturing phase


Event Bubbling Needs Multiple Levels in the DOM:

If an event happens on a deeply nested element, it will bubble up to its ancestors if they have an event listener.

To Stop Bubbling or Capturing, Use event.stopPropagation():

If you want to prevent the event from moving up or down the DOM tree, use:
event.stopPropagation();



Sure! Let's add **multiple child buttons** inside the same parent and see how event bubbling works.

---

### **üìù Code Example (Multiple Child Elements with Bubbling)**
```html
<div id="grandparent">
  <div id="parent">
    <button id="child1">Click Me 1</button>
    <button id="child2">Click Me 2</button>
    <button id="child3">Click Me 3</button>
  </div>
</div>

<script>
  // Grandparent event listener
  document.getElementById("grandparent").addEventListener("click", () => {
    console.log("Grandparent Clicked");
  });

  // Parent event listener
  document.getElementById("parent").addEventListener("click", () => {
    console.log("Parent Clicked");
  });

  // Child event listeners
  document.getElementById("child1").addEventListener("click", () => {
    console.log("Child 1 Clicked");
  });

  document.getElementById("child2").addEventListener("click", () => {
    console.log("Child 2 Clicked");
  });

  document.getElementById("child3").addEventListener("click", () => {
    console.log("Child 3 Clicked");
  });
</script>
```

---

### **üìù Expected Console Output**
When clicking **Child 2** (`child2`):
```
Child 2 Clicked  
Parent Clicked  
Grandparent Clicked  
```
When clicking **Child 3** (`child3`):
```
Child 3 Clicked  
Parent Clicked  
Grandparent Clicked  
```
When clicking **Child 1** (`child1`):
```
Child 1 Clicked  
Parent Clicked  
Grandparent Clicked  
```

---

### **‚úÖ Explanation**
- **Each button (child) has its own event listener**.
- When clicking **Child 2**, it triggers:
  - `Child 2 Clicked`
  - Then **bubbles up** to `parent`
  - Then **bubbles up** to `grandparent`
- Clicking **Child 3** follows the same process.
- Other buttons **don‚Äôt trigger unless clicked**.

---

### **üîπ What If You Click on the Parent Directly?**
If you **click on the empty space in the parent (not the buttons)**:
```
Parent Clicked  
Grandparent Clicked  
```
üöÄ **Because no button was clicked, only the parent‚Äôs event fires, then bubbles up!**

---

### **üîπ Want to Stop Bubbling?**
Use `event.stopPropagation()` inside any child to **prevent bubbling**.

```js
document.getElementById("child2").addEventListener("click", (event) => {
  event.stopPropagation(); // Stops event from bubbling up
  console.log("Child 2 Clicked");
});
```
Now, clicking **Child 2** only logs:
```
Child 2 Clicked  
```
üî• **It won‚Äôt bubble up to parent or grandparent anymore!**

---

This should clarify **how bubbling works with multiple child elements**! Let me know if you want **even deeper scenarios!** üöÄ