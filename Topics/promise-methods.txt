JavaScript provides multiple Promise methods that help in handling multiple asynchronous operations efficiently. Below, I'll cover all major Promise methods with simple examples.

---

# **🔷 1. `Promise.all()`**
`Promise.all()` takes an array of promises and **resolves when all promises are resolved**.  
If **any promise rejects, `Promise.all()` immediately rejects**.

### **✅ Example**
```js
const p1 = Promise.resolve(10);
const p2 = new Promise((resolve) => setTimeout(() => resolve(20), 1000));
const p3 = new Promise((resolve, reject) => setTimeout(() => reject("Error!"), 1500));

Promise.all([p1, p2, p3])
  .then((values) => console.log(values)) // ❌ This won't run because p3 rejects.
  .catch((error) => console.log("Rejected:", error)); // Rejected: Error!
```
👉 **Key points:**
- Returns an **array of resolved values**.
- If **any promise rejects**, the whole `Promise.all()` **rejects immediately**.

---

# **🔷 2. `Promise.allSettled()`**
`Promise.allSettled()` waits for **all promises** to either **resolve or reject**, and **returns their statuses**.

### **✅ Example**
```js
const p1 = Promise.resolve("Success!");
const p2 = new Promise((resolve) => setTimeout(() => resolve("Delayed success"), 1000));
const p3 = new Promise((_, reject) => setTimeout(() => reject("Failure!"), 500));

Promise.allSettled([p1, p2, p3])
  .then((results) => console.log(results));
```
### **💡 Output**
```js
[
  { status: "fulfilled", value: "Success!" },
  { status: "fulfilled", value: "Delayed success" },
  { status: "rejected", reason: "Failure!" }
]
```
👉 **Key points:**
- Unlike `Promise.all()`, it **does not fail** if one promise rejects.
- Returns an **array of objects** with either `{ status: "fulfilled", value: result }` or `{ status: "rejected", reason: error }`.

---

# **🔷 3. `Promise.race()`**
`Promise.race()` **resolves or rejects as soon as the first promise settles**.

### **✅ Example**
```js
const fastPromise = new Promise((resolve) => setTimeout(() => resolve("Fast Success"), 500));
const slowPromise = new Promise((resolve) => setTimeout(() => resolve("Slow Success"), 1000));

Promise.race([fastPromise, slowPromise])
  .then((value) => console.log(value)); // Fast Success (fastest one wins)
```
👉 **Key points:**
- Returns the **first settled promise**, whether it **resolves or rejects**.

---

# **🔷 4. `Promise.any()`**
`Promise.any()` resolves when **at least one promise resolves**.  
It **only rejects** if **all promises fail**.

### **✅ Example**
```js
const p1 = new Promise((_, reject) => setTimeout(() => reject("Error 1"), 500));
const p2 = new Promise((_, reject) => setTimeout(() => reject("Error 2"), 1000));
const p3 = new Promise((resolve) => setTimeout(() => resolve("Success!"), 1500));

Promise.any([p1, p2, p3])
  .then((value) => console.log(value)) // "Success!" (first resolved promise)
  .catch((error) => console.log(error)); // This will not trigger
```
👉 **Key points:**
- If **at least one promise resolves**, it **returns that resolved value**.
- If **all promises fail**, it returns an **AggregateError**.

---

# **🔷 5. `Promise.resolve()`**
`Promise.resolve(value)` creates a **resolved promise**.

### **✅ Example**
```js
Promise.resolve("Resolved value").then(console.log); // Resolved value
```
👉 **Key points:**
- Useful when you **want to wrap a value in a promise**.

---

# **🔷 6. `Promise.reject()`**
`Promise.reject(error)` creates a **rejected promise**.

### **✅ Example**
```js
Promise.reject("Something went wrong")
  .catch(console.log); // Something went wrong
```
👉 **Key points:**
- Useful for **returning errors in async functions**.

---

# **🔷 7. `Promise.finally()`**
`finally()` runs **whether the promise resolves or rejects**.

### **✅ Example**
```js
const p = new Promise((resolve, reject) => setTimeout(() => resolve("Done!"), 1000));

p.then(console.log)
 .catch(console.error)
 .finally(() => console.log("Cleanup done!"));
```
### **💡 Output**
```js
Done!
Cleanup done!
```
👉 **Key points:**
- Often used for **cleanup operations**.

---

# **🔥 Summary Table**

| Method | Resolves When | Rejects When | Returns |
|--------|-------------|-------------|---------|
| `Promise.all([p1, p2, p3])` | All promises resolve | Any one rejects | Array of values |
| `Promise.allSettled([p1, p2, p3])` | All promises settle | Never rejects | Array of `{status, value/reason}` |
| `Promise.race([p1, p2, p3])` | First promise settles | First promise settles | First settled value |
| `Promise.any([p1, p2, p3])` | First promise resolves | All reject | First resolved value or AggregateError |
| `Promise.resolve(value)` | Immediately | Never | Resolved promise |
| `Promise.reject(error)` | Never | Immediately | Rejected promise |
| `finally()` | Always runs | Always runs | Nothing |

---

# **🔥 Conclusion**
✅ `Promise.all()` fails **if one promise rejects**.  
✅ `Promise.allSettled()` **waits for all promises** to finish.  
✅ `Promise.race()` returns the **first settled promise** (resolve or reject).  
✅ `Promise.any()` returns the **first resolved promise**.  
✅ `Promise.resolve()` & `Promise.reject()` create **immediate promises**.  
✅ `finally()` runs **no matter what**.

