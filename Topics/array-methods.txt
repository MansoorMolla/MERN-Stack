const arr = [1,6,4,2,5,3,3];

console.log(arr.length); // length index start with 1 not with zero
console.log(arr.concat(7));
console.log(arr[1]);
console.log(arr.indexOf(3));
console.log(arr.lastIndexOf(3));
console.log(arr.reverse());
console.log(arr.sort());
console.log(arr.join(' '));
console.log(arr.includes(5));
console.log(arr.push(8)); // push at end 
console.log(arr.pop()); // pop single value from end
console.log(arr.unshift(0)); // add value from starting
console.log(arr.shift());
console.log(arr.slice(0,4));
console.log(arr.splice(0,4,1,1,1,1));




Sure, here are all the JavaScript array methods introduced till the latest version (ES2023), along with their arguments and purposes:

```javascript
const arr = [1,6,4,2,5,3,3];

// length: No arguments, returns the number of elements in an array.
console.log(arr.length); 

// concat: Takes any number of arrays or values, returns a new array that concatenates the array with other array(s) and/or value(s).
console.log(arr.concat(7)); 

// at: Takes an index (positive or negative), returns the item at that index.
console.log(arr.at(1)); 

// join: Takes a separator as an argument, returns a string after converting each element of the array into strings and joining them.
console.log(arr.join(' ')); 

// pop: No arguments, removes the last element from an array and returns that element.
console.log(arr.pop()); 

// push: Takes any number of arguments, adds new elements to the end of an array, and returns the new length of the array.
console.log(arr.push(8)); 

// shift: No arguments, removes the first element from an array and returns that removed element.
console.log(arr.shift()); 

// unshift: Takes any number of arguments, adds new elements to the beginning of an array, and returns the new length of the array.
console.log(arr.unshift(0)); 

// slice: Takes start and end index, returns a shallow copy of a portion of an array into a new array object.
console.log(arr.slice(0,4)); 

// splice: Takes start index, delete count and items to add, changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
console.log(arr.splice(0,4,1,1,1,1)); 

// reverse: No arguments, reverses an array in place. The first array element becomes the last, and the last array element becomes the first.
console.log(arr.reverse()); 

// sort: Takes a compare function as an argument, sorts the elements of an array in place and returns the array.
console.log(arr.sort()); 

// indexOf: Takes an element, returns the first index at which a given element can be found in the array, or -1 if it is not present.
console.log(arr.indexOf(3)); 

// lastIndexOf: Takes an element, returns the last index at which a given element can be found in the array, or -1 if it is not present.
console.log(arr.lastIndexOf(3)); 

// includes: Takes an element, checks if an array includes a certain value among its entries.
console.log(arr.includes(5)); 

// find: Takes a testing function, returns the found element in the array, if some element in the array satisfies the testing function, or undefined if not found.
console.log(arr.find(element => element > 4)); 

// findIndex: Takes a testing function, returns the found index in the array, if an element in the array satisfies the testing function, or -1 if not found.
console.log(arr.findIndex(element => element > 4)); 

// fill: Takes a static value, start index (default 0) and end index (default array.length), changes all elements in an array to a static value, from a start index to an end index.
console.log(arr.fill(0, 2, 4)); 

// map: Takes a mapping function, creates a new array populated with the results of calling a provided function on every element in the calling array.
console.log(arr.map(x => x * 2)); 

// filter: Takes a testing function, creates a new array with all elements that pass the test implemented by the provided function.
console.log(arr.filter(x => x > 3)); 

// reduce: Takes a reducer function and an initial value, applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.
console.log(arr.reduce((accumulator, currentValue) => accumulator + currentValue)); 

// flat: Takes depth (default 1), creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.
console.log(arr.flat()); 

// flatMap: Takes a mapping function, first maps each element using a mapping function, then flattens the result into a new array. It is identical to a map followed by a flat of depth 1.
console.log(arr.flatMap(x => [x * 2])); 

// copyWithin: Takes target, start and end index, shallow copies part of an array to another location in the same array and returns it, without modifying its size.
console.log(arr.copyWithin(0, 3, 5)); 

// entries: No arguments, returns a new Array Iterator object that contains the key/value pairs for each index in the array.
console.log(arr.entries()); 

// keys: No arguments, returns a new Array Iterator that contains the keys for each index in the array.
console.log(arr.keys()); 

// values: No arguments, returns a new Array Iterator object that contains the values for each index in the array.
console.log(arr.values()); 

// forEach: Takes a function, executes a provided function once for each array element.
arr.forEach(element => console.log(element)); 

// some: Takes a testing function, tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.
console.log(arr.some(element => element > 4)); 

// every: Takes a testing function, tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.
console.log(arr.every(element => element > 4)); 

// Array.from: Takes an array-like or iterable object, creates a new, shallow-copied Array instance from an array-like or iterable object.
console.log(Array.from('hello')); 

// Array.of: Takes any number of arguments, creates a new Array instance with a variable number of arguments.
console.log(Array.of(1, 2, 3)); 
```

Remember, these methods do not mutate the original array, but instead create a new one, except for `fill()`, `push()`, `pop()`, `shift()`, `unshift()`, `splice()`, `reverse()`, `sort()`, and `copyWithin()` which do modify the original array.




console.log("🔥 JavaScript Array Methods Demonstration 🔥");

let arr = [1, 2, 3, 4, 5];
console.log("Original Array:", arr);

// ✅ 1. push() - Add elements at end
arr.push(6);
console.log("After push(6):", arr);

// ✅ 2. pop() - Remove last element
arr.pop();
console.log("After pop():", arr);

// ✅ 3. shift() - Remove first element
arr.shift();
console.log("After shift():", arr);

// ✅ 4. unshift() - Add elements at beginning
arr.unshift(0);
console.log("After unshift(0):", arr);

// ✅ 5. splice() - Add/remove elements
arr.splice(2, 1, 99);
console.log("After splice(2,1,99):", arr);

// ✅ 6. slice() - Extract portion of array
console.log("Slice(1,3):", arr.slice(1, 3));

// ✅ 7. concat() - Merge arrays
console.log("Concat [7,8]:", arr.concat([7, 8]));

// ✅ 8. join() - Convert array to string
console.log("Join with '-':", arr.join('-'));

// ✅ 9. reverse() - Reverse array
console.log("Reverse:", arr.reverse());

// ✅ 10. sort() - Sort array
console.log("Sort:", arr.sort((a, b) => a - b));

// ✅ 11. map() - Transform elements
console.log("Map (x2):", arr.map(num => num * 2));

// ✅ 12. filter() - Filter elements
console.log("Filter (>3):", arr.filter(num => num > 3));

// ✅ 13. reduce() - Reduce array to single value
console.log("Reduce (sum):", arr.reduce((acc, num) => acc + num, 0));

// ✅ 14. find() - Find first matching element
console.log("Find (>3):", arr.find(num => num > 3));

// ✅ 15. findIndex() - Find index of first matching element
console.log("FindIndex (>3):", arr.findIndex(num => num > 3));

// ✅ 16. indexOf() - Find index of element
console.log("IndexOf 99:", arr.indexOf(99));

// ✅ 17. includes() - Check if array contains element
console.log("Includes 99:", arr.includes(99));

// ✅ 18. some() - Check if some elements match condition
console.log("Some (>3):", arr.some(num => num > 3));

// ✅ 19. every() - Check if all elements match condition
console.log("Every (>0):", arr.every(num => num > 0));

// ✅ 20. forEach() - Iterate over array
console.log("forEach:");
arr.forEach(num => console.log(num));

// ✅ 21. keys() - Get keys (indexes)
console.log("Keys:", [...arr.keys()]);

// ✅ 22. values() - Get values
console.log("Values:", [...arr.values()]);

// ✅ 23. entries() - Get key-value pairs
console.log("Entries:", [...arr.entries()]);

// ✅ 24. fill() - Fill array with value
console.log("Fill with 5:", arr.fill(5, 1, 3));

// ✅ 25. flat() - Flatten nested arrays
let nestedArr = [1, [2, [3, [4]]]];
console.log("Flat:", nestedArr.flat(Infinity));

// ✅ 26. flatMap() - Map + Flatten
console.log("FlatMap:", arr.flatMap(num => [num, num * 2]));

// ✅ 27. Array.from() - Convert iterable to array
console.log("Array from string:", Array.from("Hello"));

// ✅ 28. Array.of() - Create array from elements
console.log("Array of:", Array.of(10, 20, 30));

// ✅ 29. copyWithin() - Copy elements within array
console.log("CopyWithin:", arr.copyWithin(0, 1, 3));

console.log("🚀 Array Methods Demonstration Completed 🚀");





🔹 1. Array length

🔸 Theory:
- length is a property (not a method) of arrays that returns the number of elements.
- You can also set it manually to truncate or expand the array.

🔸 Syntax:
array.length        // Get length
array.length = n    // Set new length

🔸 Modifies Original Array:
✅ Yes, only when setting it manually.

🔸 Key Points:
- Setting length smaller truncates the array.
- Setting it larger pads with empty slots.
- Can be used to clear an array: arr.length = 0.

🔸 Code Examples:
```js
let fruits = ["apple", "banana", "cherry"];
console.log(fruits.length);  // 3

fruits.length = 2;
console.log(fruits);         // ["apple", "banana"]

fruits.length = 5;
console.log(fruits);         // ["apple", "banana", <3 empty items>]

fruits.length = 0;
console.log(fruits);         // []
```

🔸 Common Interview Use Cases:
- Clearing an array.
- Truncating large arrays.
- Checking array bounds.



🔹 2. Array toString()

🔸 Theory:  
- The toString() method converts an array to a comma-separated string.
- It does not mutate the original array.

🔸 Syntax:
```js
array.toString()
```

🔸 Modifies Original Array:
❌ No — it returns a new string.

🔸 Key Points:
- Automatically called in string contexts (e.g., alert, template literals).
- Only joins the array elements using a comma (no custom separator).
- Nested arrays are flattened only one level via implicit toString calls.

🔸 Code Examples:
```js
let arr = [10, 20, 30];
console.log(arr.toString());      // "10,20,30"

let mix = [1, "apple", true];
console.log(mix.toString());      // "1,apple,true"

let nested = [1, [2, 3]];
console.log(nested.toString());   // "1,2,3"

console.log(`${arr}`);            // "10,20,30" → Implicit toString call
```

🔸 Use Cases:
- Quick string conversion for display/logging.
- Lightweight serialization (not for structured data).

🔸 Interview Notes:
- If you need custom separator → use join().
- Does not serialize nested arrays or objects like JSON.stringify.




🔹 Array.at(index)

🔸 Purpose:  
Gets element at given index. Supports negative indexing (like Python).

🔸 Syntax:
```js
arr.at(index)
```

🔸 Key Points:

- index ≥ 0 → gets from front  
- index < 0 → counts from end  
- Returns undefined if out of bounds  
- Does NOT modify original array  

🔸 Example:
```js
let arr = [10, 20, 30];
arr.at(0);   // 10
arr.at(-1);  // 30
arr.at(10);  // undefined
```

🔸 Difference from arr[index]:

| Feature      | arr[index] | arr.at(index) |
|--------------|------------|----------------|
| Negative index | ❌        | ✅              |
| Chain safety   | ❌        | ✅              |
| Clean syntax   | ⚠️        | ✅              |




📘 Array.join() — Simple Definition

join() is a method in JavaScript that joins all elements of an array into a single string, using a specified separator between elements.

🧠 Default behavior:

- If no separator is provided, it uses a comma (`,`).
- It converts each element to string (just like toString()).
- It does NOT modify the original array.

📌 Syntax:
```js
array.join(separator)
```

- separator (optional): a string to place between each element (e.g., space, dash, empty string). If omitted → default is ",".

✅ Example:
```js
["JavaScript", "is", "fun"].join(" ")  
// "JavaScript is fun"
```



🔹 Array.prototype.pop()

📘 Definition:
pop() removes the last element from an array and returns that removed element. It directly modifies (mutates) the original array.

📌 Syntax:
```js
array.pop()
```

- No parameters required.
- Returns the last element (or undefined if the array is empty).

🧠 Key Notes:

- Original array is mutated — last item is removed.
- If array is empty → returns undefined, array stays empty.

✅ Examples:
```js
let nums = [1, 2, 3];
let popped = nums.pop();
console.log(popped);   // 3
console.log(nums);     // [1, 2]

let empty = [];
let result = empty.pop();
console.log(result);   // undefined
console.log(empty);    // []
```


🔹 Array.prototype.push()

📘 Definition:  
push() adds one or more elements to the end of an array and returns the new length of the array. It modifies (mutates) the original array.

📌 Syntax:
```js
array.push(element1, element2, ..., elementN)
```

🧠 Key Points:

- Accepts any number of arguments.
- Returns the updated array length (not the new array).
- Mutates the original array by adding elements at the end.
- Can push any data type: numbers, strings, objects, arrays, etc.

✅ Examples:
```js
let arr = [10, 20];
let len = arr.push(30);
console.log(arr);     // [10, 20, 30]
console.log(len);     // 3

arr.push(40, 50);
console.log(arr);     // [10, 20, 30, 40, 50]

// Pushing arrays or objects
arr.push([60, 70]);
console.log(arr);     // [10, 20, 30, 40, 50, [60, 70]]
```


🔹 Array.prototype.shift()

📘 Definition:  
shift() removes the first element from an array and returns that removed element. It modifies (mutates) the original array.

📌 Syntax:
```js
array.shift()
```

🧠 Key Points:

- Removes the element at index 0.
- Returns the removed element (not an array).
- Changes the length of the array.
- All remaining elements are reindexed (shifted left).
- If the array is empty, returns undefined.

✅ Examples:
```js
let arr = [100, 200, 300];
let first = arr.shift();
console.log(first);  // 100
console.log(arr);    // [200, 300]

let empty = [].shift();
console.log(empty);  // undefined
```

🔹 Array.prototype.unshift()

📘 Definition:  
unshift() adds one or more elements to the beginning of an array and returns the new length of the array. It mutates (modifies) the original array.

📌 Syntax:
```js
array.unshift(element1, element2, ..., elementN)
```

🧠 Key Points:

- Adds elements to the start of the array.
- Returns the new length of the array.
- Shifts all existing elements to the right (re-indexes them).
- Can insert multiple elements at once.
- Works on empty arrays too.

✅ Examples:
```js
let arr = [10, 20];
let newLength = arr.unshift(1);
console.log(arr);        // [1, 10, 20]
console.log(newLength);  // 3

arr.unshift(-2, -1, 0);
console.log(arr);        // [-2, -1, 0, 1, 10, 20]

let empty = [];
empty.unshift('first');
console.log(empty);      // ['first']
```

🔹 Array delete operator

📘 Definition:  
The delete operator can remove an element from an array at a specific index, but it does not update the length or reindex the array. It simply sets the element to undefined (i.e., creates a hole).

📌 Syntax:
```js
delete array[index]
```

🧠 Key Points:

- It removes the value at the given index but leaves an empty slot (a "hole").
- It does NOT change the array's length.
- It is not recommended for removing elements from arrays. Use splice() instead if you want to remove and shift elements properly.
- Works on any index, even out of bounds (does nothing in that case).

✅ Examples:
```js
let arr = [1, 2, 3, 4];
delete arr[2];
console.log(arr);        // [1, 2, <1 empty item>, 4]
console.log(arr.length); // 4

console.log(arr[2]);     // undefined
console.log(2 in arr);   // false (hole exists)
```

🛑 Not ideal for:
- Re-indexing arrays
- Properly removing elements
- Avoiding holes

🔁 Prefer splice() if you want to remove elements cleanly.

🔹 Array.concat()

📘 Definition:  
The concat() method merges two or more arrays without changing the original arrays. It returns a new array.

📌 Syntax:
```js
newArray = array1.concat(value1, value2, ..., valueN)
```

📥 Parameters:

- value1, value2, ..., valueN — arrays or values to concatenate to the original array.

📤 Returns:

- A new array containing the original array followed by the given values/arrays.

🧠 Key Points:

- Does NOT modify the original array.
- Can accept individual values or multiple arrays.
- Supports nested arrays (but does not deeply flatten).

✅ Examples:
```js
const a = [1, 2];
const b = [3, 4];
const c = [5, [6, 7]];

const result = a.concat(b);         // [1, 2, 3, 4]
const withValue = a.concat(99);     // [1, 2, 99]
const multi = a.concat(b, c);       // [1, 2, 3, 4, 5, [6, 7]]

console.log(a); // [1, 2] (unchanged)
```

⚠️ Notes:

- Only one-level flattening (shallow). Deep nested arrays are not flattened.
- Useful for combining dynamic values or spreading elements together.

📌 Shallow flatten example:
```js
const arr = [1, 2].concat([3, [4, 5]]);
console.log(arr); // [1, 2, 3, [4, 5]]
```

🔹 Array.copyWithin()

📘 Definition:  
The copyWithin() method copies a part of the array to another location in the same array, without changing its length.

📌 Syntax:
```js
array.copyWithin(target, start, end)
```

📥 Parameters:

- target (required): index where copied elements will be placed.
- start (optional): index to start copying from (default is 0).
- end (optional): index to stop copying (non-inclusive, default is array.length).

📤 Returns:
- The modified original array (in-place).

🧠 Key Points:

- Modifies the original array.
- Does NOT add new elements, only overwrites.
- Works with negative indices too.
- Good for performance-heavy tasks like memory-efficient data shifts.

✅ Examples:
```js
let arr = [1, 2, 3, 4, 5];

arr.copyWithin(0, 3);       // [4, 5, 3, 4, 5]
// copies elements from index 3 to end and places at index 0

arr = [1, 2, 3, 4, 5];
arr.copyWithin(1, 0, 2);    // [1, 1, 2, 4, 5]
// copies [1,2] to start at index 1

arr = [10, 20, 30, 40, 50];
arr.copyWithin(-2, 0, 2);   // [10, 20, 30, 10, 20]
// negative target index: start copying from beginning and paste at 3rd index from last
```

⚠️ Notes:

- Does not increase array length.
- Overwrites existing values.
- Can be used creatively for shifting blocks of data.

🔹 Array.flat()

📘 Definition:  
The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.

📌 Syntax:
```js
array.flat(depth)
```

📥 Parameters:

- depth (optional):  
  How deep a nested array structure should be flattened. Default is 1.

📤 Returns:
- A new flattened array.

🧠 Key Points:

- Returns a new array (does NOT modify original).
- If no depth is passed → flattens one level.
- To fully flatten any level → use Infinity as depth.

✅ Examples:
```js
[1, 2, [3, 4]].flat();                   // [1, 2, 3, 4]

[1, 2, [3, [4, 5]]].flat();             // [1, 2, 3, [4, 5]]
[1, 2, [3, [4, 5]]].flat(2);            // [1, 2, 3, 4, 5]

[1, [2, [3, [4]]]].flat(Infinity);      // [1, 2, 3, 4]

['a', ['b', ['c']]].flat(3);            // ['a', 'b', 'c']
```

🛠 Use Cases:

- Clean deeply nested arrays.
- Useful for preparing data from APIs or processing DOM elements.

⚠️ Notes:

- Works on sparse arrays too (like holes).
- Does not flatten objects, only arrays inside arrays.

🔹 Array.splice()

📘 Definition:  
The splice() method changes the contents of an array by removing, replacing, or adding elements in place.

📌 Syntax:
array.splice(start, deleteCount, item1, item2, ...)

📥 Parameters:

- start (required): Index at which to start changing the array.
- deleteCount (optional): Number of elements to remove.
- item1, item2, … (optional): Items to add at the start index.

📤 Returns:
- An array containing the deleted elements.

🧠 Key Points:

- Modifies the original array (⚠️ mutates).
- Can add, remove, or both at once.
- If deleteCount is 0 → just inserts.
- If nothing to add → just deletes.

✅ Examples:

1. Remove elements:
```js
let arr1 = [1, 2, 3, 4];
let removed = arr1.splice(1, 2);       // arr1 = [1, 4], removed = [2, 3]
```

2. Insert elements:
```js
let arr2 = [1, 4];
arr2.splice(1, 0, 2, 3);               // arr2 = [1, 2, 3, 4]
```

3. Replace elements:
```js
let arr3 = [1, 2, 3, 4];
arr3.splice(1, 2, 99, 100);           // arr3 = [1, 99, 100, 4]
```

4. Delete from end:
```js
let arr4 = [10, 20, 30, 40, 50];
arr4.splice(-2, 2);                   // arr4 = [10, 20, 30]
```

⚠️ Notes:

- Negative start counts from end (e.g., -1 = last item).
- Deletes are optional (can be zero).
- Works in-place, not a pure function.

Awesome! Let’s move to the next one — Array.splice()

---

### 🔹 Array.splice()

📘 Definition:  
Modifies the original array by removing, replacing, or adding elements at specific index(es). It is one of the few mutating methods in JS.

📌 Syntax:
```js
array.splice(start, deleteCount, item1, item2, ...)
```

- `start`: Index at which to start changing the array.
- `deleteCount`: Number of elements to remove.
- `item1, item2, ...`: Optional. Items to insert at the start position.

---

### 🔍 Use Cases & Examples:

```js
let arr = [10, 20, 30, 40, 50];

// 1. Remove elements
let removed = arr.splice(1, 2); // remove 2 items from index 1
console.log(removed);  // [20, 30]
console.log(arr);      // [10, 40, 50]

// 2. Insert elements without deleting
arr.splice(1, 0, 25);  // insert 25 at index 1
console.log(arr);      // [10, 25, 40, 50]

// 3. Replace elements
arr.splice(2, 1, 35, 36); // replace 1 item at index 2 with 35, 36
console.log(arr);         // [10, 25, 35, 36, 50]

// 4. Delete all from a certain index
arr.splice(3);            // remove from index 3 to end
console.log(arr);         // [10, 25, 35]

// 5. Negative index
arr.splice(-1, 1, 100);   // replace last element with 100
console.log(arr);         // [10, 25, 100]
```

---

✅ Notes:

- It changes (mutates) the original array.
- Returns an array of removed elements.
- Powerful for add/remove/replace operations.

Great question! Let’s break down the key differences among these six JavaScript array methods — find, findIndex, findLast, findLastIndex, indexOf, and lastIndexOf — in a clean, structured way.

---

## 🔍 Quick Comparison Table

| Method               | Searches From | Returns Value or Index | Predicate/Value | First/Last Match |
|----------------------|----------------|-------------------------|------------------|------------------|
| `find()`             | Start → End     | ✅ Value                | ✅ Predicate Fn   | ✅ First Match    |
| `findIndex()`        | Start → End     | 🔢 Index                | ✅ Predicate Fn   | ✅ First Match    |
| `findLast()`         | End → Start     | ✅ Value                | ✅ Predicate Fn   | ✅ Last Match     |
| `findLastIndex()`    | End → Start     | 🔢 Index                | ✅ Predicate Fn   | ✅ Last Match     |
| `indexOf()`          | Start → End     | 🔢 Index                | ❌ Direct Value   | ✅ First Match    |
| `lastIndexOf()`      | End → Start     | 🔢 Index                | ❌ Direct Value   | ✅ Last Match     |

---

## 🧠 Core Concepts

### 1. ✅ Array.find(callbackFn)
- Returns: First element that matches the condition
- Stops searching when the condition is met
- Use when you want the element itself

```js
const nums = [10, 20, 30, 40];
const found = nums.find(n => n > 25); // → 30
```

---

### 2. 🔢 Array.findIndex(callbackFn)
- Returns: Index of first element that matches the condition
- Use when you care about position (index), not value

```js
const nums = [10, 20, 30, 40];
const index = nums.findIndex(n => n > 25); // → 2
```

---

### 3. ✅ Array.findLast(callbackFn) (ES2023+)
- Returns: Last element that satisfies the condition (searches from end)
- Same as `find()`, but in reverse

```js
const nums = [10, 20, 30, 40];
const foundLast = nums.findLast(n => n > 15); // → 40
```

---

### 4. 🔢 Array.findLastIndex(callbackFn) (ES2023+)
- Returns: Index of last element that satisfies the condition (reverse search)

```js
const nums = [10, 20, 30, 40];
const lastIndex = nums.findLastIndex(n => n > 15); // → 3
```

---

### 5. 🔢 Array.indexOf(value, fromIndex = 0)
- Returns: First index of the exact value (uses `===`)
- Great for primitives, not suitable for objects/functions

```js
const colors = ['red', 'green', 'blue', 'green'];
colors.indexOf('green'); // → 1
```

---

### 6. 🔢 Array.lastIndexOf(value, fromIndex = arr.length - 1)
- Returns: Last index of the exact value (also uses `===`)
- Searches backward

```js
const colors = ['red', 'green', 'blue', 'green'];
colors.lastIndexOf('green'); // → 3
```

---

## 🔁 Key Differences in Behavior

| Method         | Direction | Match Type     | Good For                      |
|----------------|-----------|----------------|-------------------------------|
| find           | ➡️         | condition fn   | First value matching criteria |
| findIndex      | ➡️         | condition fn   | Index of first match          |
| findLast       | ⬅️         | condition fn   | Last value matching criteria  |
| findLastIndex  | ⬅️         | condition fn   | Index of last match           |
| indexOf        | ➡️         | direct match   | Primitive search              |
| lastIndexOf    | ⬅️         | direct match   | Last occurrence               |

---

## ⚠️ Object Caveat for indexOf / lastIndexOf

```js
const obj = { id: 1 };
const arr = [obj];
arr.indexOf({ id: 1 });        // -1 (not same reference)
arr.indexOf(obj);              // 0 (same reference)
```

---

## 🧪 Edge Case Summary

| Input                     | `find` | `findIndex` | `indexOf` |
|---------------------------|--------|-------------|-----------|
| No match found            | undefined | -1       | -1        |
| Searching objects         | Works with predicate | Works with predicate | Fails unless same reference |
| Sparse array holes        | Skipped in predicate | Skipped | Considered |

---

Would you like a visualization or code comparison of all six in one example?