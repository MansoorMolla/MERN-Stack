The `console` object provides various methods for debugging and logging messages in the browser’s developer tools or Node.js. Let's go through each method, its purpose, when to use it, and examples.

---

### **1. `console.log()`**
✅ **Purpose**: Logs general messages for debugging.  
✅ **When to Use**: For normal debugging, checking values, and testing outputs.  
✅ **Example**:  
```javascript
console.log("Hello, world!"); 
console.log({ name: "John", age: 25 });
console.log([1, 2, 3, 4]);
```
✅ **Output**:
```
Hello, world!
{name: "John", age: 25}
[1, 2, 3, 4]
```
---

### **2. `console.info()`**
✅ **Purpose**: Similar to `console.log()`, but semantically represents informational messages.  
✅ **When to Use**: When you want to log information instead of debugging messages.  
✅ **Example**:  
```javascript
console.info("This is an info message");
```
✅ **Output**:
```
ℹ️ This is an info message
```
_(Some browsers display an "ℹ️" icon, but behavior may vary.)_

---

### **3. `console.warn()`**
✅ **Purpose**: Logs warnings in yellow color.  
✅ **When to Use**: To indicate potential issues in the code that might cause problems.  
✅ **Example**:  
```javascript
console.warn("This is a warning message");
```
✅ **Output**:
```
⚠️ This is a warning message
```
_(Displayed in yellow with a warning icon in some browsers.)_

---

### **4. `console.error()`**
✅ **Purpose**: Logs error messages in red color.  
✅ **When to Use**: To display critical issues or errors in the code.  
✅ **Example**:  
```javascript
console.error("Something went wrong!");
```
✅ **Output**:
```
❌ Something went wrong!
```
_(Displayed in red with an error icon in some browsers.)_

---

### **5. `console.table()`**
✅ **Purpose**: Displays tabular data in a structured format.  
✅ **When to Use**: When debugging arrays or objects with multiple properties.  
✅ **Example**:  
```javascript
const users = [
  { id: 1, name: "Alice", age: 25 },
  { id: 2, name: "Bob", age: 30 },
];

console.table(users);
```
✅ **Output (in a tabular format)**:
```
┌─────────┬────┬───────┬─────┐
│ (index) │ id │ name  │ age │
├─────────┼────┼───────┼─────┤
│    0    │ 1  │ Alice │ 25  │
│    1    │ 2  │ Bob   │ 30  │
└─────────┴────┴───────┴─────┘
```

---

### **6. `console.dir()`**
✅ **Purpose**: Displays an interactive list of an object’s properties.  
✅ **When to Use**: When inspecting deeply nested objects or DOM elements.  
✅ **Example**:  
```javascript
console.dir(document.body);
```
✅ **Output**:  
_(Expands the document body element showing all properties in an interactive tree.)_

---

### **7. `console.group()` & `console.groupEnd()`**
✅ **Purpose**: Groups related log messages together in an expandable/collapsible section.  
✅ **When to Use**: To structure console messages neatly.  
✅ **Example**:  
```javascript
console.group("User Details");
console.log("Name: John");
console.log("Age: 30");
console.log("Country: USA");
console.groupEnd();
```
✅ **Output**:
```
▶ User Details
    Name: John
    Age: 30
    Country: USA
```
_(Collapsible in console.)_

---

### **8. `console.time()` & `console.timeEnd()`**
✅ **Purpose**: Measures execution time of a block of code.  
✅ **When to Use**: To check performance and execution time of functions.  
✅ **Example**:  
```javascript
console.time("Loop Time");
for (let i = 0; i < 1000000; i++) {}
console.timeEnd("Loop Time");
```
✅ **Output**:
```
Loop Time: 10.52ms
```

---

### **9. `console.assert()`**
✅ **Purpose**: Logs an error message if a condition is false.  
✅ **When to Use**: For debugging assertions without throwing an exception.  
✅ **Example**:  
```javascript
const age = 15;
console.assert(age >= 18, "User is not an adult!");
```
✅ **Output (if condition fails)**:
```
❌ Assertion failed: User is not an adult!
```
_(Nothing logs if the condition is true.)_

---

### **10. `console.count()` & `console.countReset()`**
✅ **Purpose**: Counts how many times a label is logged.  
✅ **When to Use**: To track function calls or loop iterations.  
✅ **Example**:  
```javascript
function greet() {
  console.count("Greet Function Called");
}
greet();
greet();
greet();
console.countReset("Greet Function Called");
greet();
```
✅ **Output**:
```
Greet Function Called: 1
Greet Function Called: 2
Greet Function Called: 3
Greet Function Called: 1
```

---

### **11. `console.trace()`**
✅ **Purpose**: Prints the function call stack to trace code execution.  
✅ **When to Use**: To debug where a function was called from.  
✅ **Example**:  
```javascript
function first() {
  second();
}
function second() {
  third();
}
function third() {
  console.trace("Trace Example");
}
first();
```
✅ **Output**:
```
Trace Example
    at third (script.js:10)
    at second (script.js:6)
    at first (script.js:2)
```

---

### **12. `console.clear()`**
✅ **Purpose**: Clears the console.  
✅ **When to Use**: To remove all logs from the console for a clean output.  
✅ **Example**:  
```javascript
console.clear();
```
✅ **Output**:
```
(Console is cleared.)
```

---

## **Summary of Console Methods**

| Method | Purpose | Example Usage |
|--------|---------|--------------|
| `console.log()` | General logging | `console.log("Debug message")` |
| `console.info()` | Informational messages | `console.info("Info message")` |
| `console.warn()` | Warnings | `console.warn("Warning message")` |
| `console.error()` | Errors | `console.error("Error occurred")` |
| `console.table()` | Displays tabular data | `console.table([{ id: 1, name: "Alice" }])` |
| `console.dir()` | Displays object structure | `console.dir(document.body)` |
| `console.group()` | Groups console logs | `console.group("Title")` |
| `console.time()` | Measures execution time | `console.time("Test")` |
| `console.assert()` | Assertion failure logs | `console.assert(age >= 18, "Not an adult")` |
| `console.count()` | Counts occurrences | `console.count("Counter")` |
| `console.trace()` | Prints function stack trace | `console.trace("Debug Trace")` |
| `console.clear()` | Clears console logs | `console.clear()` |

---

## **Conclusion**
✅ The `console` object provides powerful debugging tools beyond just `console.log()`.  
✅ Use `console.table()` for structured data, `console.group()` for neat organization, and `console.time()` for performance checks.  
✅ `console.trace()` helps in debugging function call sequences.  
✅ Avoid excessive logging in production code.  

