// In Js call, apply & bind are methods used to modify the context of a function call(this context)
// speacially the value of these keyword within function 
// used in situation of event handling , in event handler this keyword ofter refer to element that triggered 
// the event, which might not be what you want, then we use call apply bind to set this to different object
// 

// bind() : takes one or more arguments
// first is the object to set this keyword
// next arguments are prefilled for new functions  , its return a new function and these will be called later with d/f arguments

// call() : tskes two or more arguments
// first is the object to set this keyword
// subsequent arguments are passed as individual function arguments
// immedietly executes the function with provided arguments and this context

// apply() : tskes two arguments
// first is the object to set this keyword
// second argument is an array containing the function argument
// immedietly executes the function with provided arguments and this context






var x = 10;
function context(){
    console.log(x);
    console.log(this.x);
    console.log(window.x);
}
context();


var salary = 5000;

function check() {
    console.log('salary is :', this.salary);
}
const details = {
    'salary': 9000
}
check();
const update = check.bind(details)
update();



var salary = 5000;

function check(a, b, c) {
    console.log('salary is :', this.salary);
    console.log('a is :', a);
    console.log('b is :', b);
    console.log('c is :', c);
}
const details = {
    'salary': 9000
}
check.apply(details, [10, 20, 30]);



var salary = 5000;

function check(a, b, c) {
    console.log('salary is :', this.salary);
    console.log('a is :', a);
    console.log('b is :', b);
    console.log('c is :', c);
}
const details = {
    'salary': 9000
}
check.call(details, 10,20,30);




### **Understanding `call()`, `apply()`, and `bind()` in JavaScript**

In JavaScript, **functions are objects**, and every function has access to three powerful methods:  

1. **`call()`** ‚Äì Calls a function with a specified `this` value and arguments passed **individually**.  
2. **`apply()`** ‚Äì Calls a function with a specified `this` value and arguments passed **as an array**.  
3. **`bind()`** ‚Äì Returns a **new function** with a specified `this` value, which can be called later.  

---

### **1Ô∏è‚É£ `call()` Method**
The **`call()` method** is used to **invoke a function immediately**, setting the `this` value explicitly. The arguments are passed **individually**.  

üîπ **Syntax:**
```javascript
functionName.call(thisArg, arg1, arg2, ...);
```

üîπ **Example:**
```javascript
const person = {
  name: "Mansoor",
};

function greet(city, country) {
  console.log(`Hello, I am ${this.name} from ${city}, ${country}.`);
}

// Using call() to set `this` to `person`
greet.call(person, "Hyderabad", "India");

// Output: "Hello, I am Mansoor from Hyderabad, India."
```
‚úÖ **Explanation:**  
- Here, `this` inside `greet` refers to `person`, so `this.name` becomes `"Mansoor"`.  
- Arguments (`"Hyderabad"`, `"India"`) are passed **individually**.

---

### **2Ô∏è‚É£ `apply()` Method**
The **`apply()` method** is similar to `call()`, but it **accepts arguments as an array** instead of individual values.

üîπ **Syntax:**
```javascript
functionName.apply(thisArg, [arg1, arg2, ...]);
```

üîπ **Example:**
```javascript
greet.apply(person, ["Hyderabad", "India"]);

// Output: "Hello, I am Mansoor from Hyderabad, India."
```
‚úÖ **Difference from `call()`:**  
- Instead of passing arguments **individually**, `apply()` requires an **array** of arguments.  
- Useful when arguments are already in an array format.

üîπ **Real-world use case:**  
`apply()` is commonly used with `Math.max()` or `Math.min()`, since they don‚Äôt accept arrays directly.
```javascript
const numbers = [10, 5, 20, 8];

console.log(Math.max.apply(null, numbers)); // Output: 20
```
- Here, `null` is used as `this` since `Math.max()` doesn‚Äôt use it.

---

### **3Ô∏è‚É£ `bind()` Method**
The **`bind()` method** doesn‚Äôt call the function immediately.  
Instead, it **returns a new function** with `this` permanently set to the provided value.

üîπ **Syntax:**
```javascript
const newFunction = functionName.bind(thisArg, arg1, arg2, ...);
```

üîπ **Example:**
```javascript
const boundGreet = greet.bind(person, "Hyderabad", "India");

boundGreet(); 
// Output: "Hello, I am Mansoor from Hyderabad, India."
```
‚úÖ **Explanation:**  
- `bind()` **returns a new function**, which can be called later.  
- The `this` inside `boundGreet` is permanently bound to `person`.  

üîπ **Real-world use case:**  
Used in **event listeners** to ensure `this` refers to the correct object:
```javascript
const user = {
  name: "Mansoor",
  greet() {
    console.log(`Hello, ${this.name}!`);
  },
};

const button = document.querySelector("button");

// Using bind() to ensure `this` inside `greet` refers to `user`
button.addEventListener("click", user.greet.bind(user));
```

---

### **üöÄ Summary of `call()`, `apply()`, and `bind()`**
| Method | When to Use | Arguments Passed | Calls Function Immediately? |
|--------|------------|------------------|----------------------------|
| **`call()`** | When you need to invoke a function with a specific `this` | Individually (comma-separated) | ‚úÖ Yes |
| **`apply()`** | When arguments are already in an array | As an array | ‚úÖ Yes |
| **`bind()`** | When you need to create a new function with a bound `this` | Individually (comma-separated) | ‚ùå No (returns a new function) |

---

### **üîπ Key Takeaways**
- `call()` and `apply()` **execute the function immediately**, while `bind()` **returns a new function**.
- `call()` and `apply()` are similar, but `apply()` takes **arguments as an array**.
- `bind()` is useful when you want to ensure a function always uses a specific `this`, especially in **event handlers**.

---

Now, you have a **clear understanding** of `call()`, `apply()`, and `bind()` with real-world use cases. Let me know if you need further clarification!