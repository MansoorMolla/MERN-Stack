// A JavaScript object is a complex data type that allows you to store and organize related data 
using key-value pairs. It's defined within curly braces {} and can hold various types of values, 
including strings, numbers, booleans, arrays, other objects, functions, 'null', and
"undefined. Objects are a fundamental part of JavaScript and provide a way to represent structured 
data and behaviors in a flexible and organized manner.


let object = {
    name: "John",
    age: 30,
    isStudent: false,
    skills: ["JavaScript", "HTML", "CSS"],
    "key with spaces": "Accessing a key in string format",
    address: {
        city: "New York", country: "USA"
    },
    sayHello: function () {
        console.log("Hello, I'm " + this.name);
    },
    favoriteColor: null,
    experience: undefined
};


// Accessing properties
console.log(object.name); // Output: John

console. log (object.skills [0]); // Output: JavaScript

// Accessing a key with spaces using bracket notation
console.log(object["key with spaces"]); // Output: Accessing a key in string format

// Calling a function property
object.sayHello(); // Output: Hello, I'm John

// Modifying properties
object.age = 32;
object.skills.push("React");
object.address.city = "San Francisco";

// Adding new property
object.isProgrammer = true;

// Deleting a property
delete object.favoriteColor;




---

### **JavaScript Object Example**
```javascript
const user = {
  name: "John",
  age: 30,
  city: "New York",
  isAdmin: true,
  greet() {
    return `Hello, ${this.name}!`;
  },
  [Symbol("id")]: 101,
};
```

---

### **1. `Object.keys(obj)`**
✅ **Returns an array of all enumerable string keys (ignores non-enumerable and Symbol keys).**  
```javascript
console.log(Object.keys(user)); 
// Output: ['name', 'age', 'city', 'isAdmin', 'greet']
```

---

### **2. `Object.values(obj)`**
✅ **Returns an array of all enumerable values (ignores Symbol values).**  
```javascript
console.log(Object.values(user)); 
// Output: ['John', 30, 'New York', true, [Function: greet]]
```

---

### **3. `Object.entries(obj)`**
✅ **Returns an array of `[key, value]` pairs (ignores Symbol properties).**  
```javascript
console.log(Object.entries(user)); 
// Output: [['name', 'John'], ['age', 30], ['city', 'New York'], ['isAdmin', true], ['greet', [Function: greet]]]
```

---

### **4. `Object.getOwnPropertyNames(obj)`**
✅ **Returns an array of all own properties (excluding Symbols).**  
```javascript
console.log(Object.getOwnPropertyNames(user)); 
// Output: ['name', 'age', 'city', 'isAdmin', 'greet']
```

---

### **5. `Object.getOwnPropertySymbols(obj)`**
✅ **Returns an array of Symbol keys.**  
```javascript
console.log(Object.getOwnPropertySymbols(user)); 
// Output: [ Symbol(id) ]
```

---

### **6. `Object.hasOwn(obj, prop)` (ES2022)**
✅ **Checks if a property exists directly on the object (does not check prototype chain).**  
```javascript
console.log(Object.hasOwn(user, "name")); // true
console.log(Object.hasOwn(user, "toString")); // false (inherited)
```

---

### **7. `Object.freeze(obj)`**
✅ **Prevents adding, removing, or modifying properties.**  
```javascript
Object.freeze(user);
user.name = "Alice"; // ❌ No effect
delete user.age; // ❌ No effect
console.log(user.name); // 'John'
```

---

### **8. `Object.seal(obj)`**
✅ **Prevents adding or deleting properties but allows modifying existing ones.**  
```javascript
Object.seal(user);
user.age = 35; // ✅ Allowed
delete user.city; // ❌ Not allowed
console.log(user.age); // 35
```

---

### **9. `Object.assign(target, source)`**
✅ **Copies properties from source to target object.**  
```javascript
const newUser = {};
Object.assign(newUser, user, { country: "USA" });
console.log(newUser);
/* 
Output:
{
  name: 'John',
  age: 30,
  city: 'New York',
  isAdmin: true,
  greet: [Function: greet],
  country: 'USA'
}
*/
```

---

### **10. `Object.create(protoObj)`**
✅ **Creates a new object with the given prototype.**  
```javascript
const person = { species: "Human" };
const student = Object.create(person);
student.name = "Alice";

console.log(student.species); // 'Human' (inherited from person)
console.log(Object.getPrototypeOf(student) === person); // true
```

---

### **11. `Object.defineProperty(obj, prop, descriptor)`**
✅ **Adds or modifies a property with detailed control.**  
```javascript
const car = {};
Object.defineProperty(car, "brand", {
  value: "Toyota",
  writable: false, // Cannot be changed
  enumerable: true, // Can be listed in loops
  configurable: false, // Cannot be deleted
});

console.log(car.brand); // 'Toyota'
car.brand = "Honda"; // ❌ No effect
console.log(car.brand); // 'Toyota'
```

---

### **12. `Object.entries()` with `Object.fromEntries()`**
✅ **Convert object to an array and back to an object.**  
```javascript
const entries = Object.entries(user);
console.log(entries); 
// [['name', 'John'], ['age', 30], ['city', 'New York'], ['isAdmin', true], ['greet', [Function: greet]]]

const newUserObj = Object.fromEntries(entries);
console.log(newUserObj); // Same as user object
```

---

### **13. `Object.getPrototypeOf(obj)`**
✅ **Gets the prototype of an object.**  
```javascript
console.log(Object.getPrototypeOf(student)); // { species: 'Human' }
```

---

### **14. `Object.setPrototypeOf(obj, proto)`**
✅ **Changes an object's prototype.**  
```javascript
const animal = { type: "Mammal" };
Object.setPrototypeOf(student, animal);
console.log(student.type); // 'Mammal'
```

---

### **15. `Object.is(obj1, obj2)`**
✅ **Strict equality check but handles special cases like `NaN`.**  
```javascript
console.log(Object.is(NaN, NaN)); // true (Unlike ===)
console.log(Object.is(+0, -0)); // false
```

---

### **Final Summary Table**

| Method                         | Purpose |
|--------------------------------|---------|
| `Object.keys(obj)`             | Returns an array of string keys |
| `Object.values(obj)`           | Returns an array of values |
| `Object.entries(obj)`          | Returns an array of `[key, value]` pairs |
| `Object.getOwnPropertyNames(obj)` | Returns all string keys (even non-enumerable) |
| `Object.getOwnPropertySymbols(obj)` | Returns only symbol keys |
| `Object.hasOwn(obj, prop)`     | Checks if an object has a property |
| `Object.freeze(obj)`           | Prevents modification, addition, deletion of properties |
| `Object.seal(obj)`             | Prevents addition or deletion, allows modification |
| `Object.assign(target, source)` | Copies properties from one object to another |
| `Object.create(protoObj)`      | Creates an object with a prototype |
| `Object.defineProperty(obj, prop, descriptor)` | Adds/modifies a property with descriptors |
| `Object.entries()` with `Object.fromEntries()` | Convert object to array and back |
| `Object.getPrototypeOf(obj)`   | Gets the prototype of an object |
| `Object.setPrototypeOf(obj, proto)` | Sets the prototype of an object |
| `Object.is(obj1, obj2)`        | Strict equality with special case handling |

