{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development\\\\Reactjs\\\\src\\\\components\\\\UncontrolledComponent.js\",\n  _s = $RefreshSig$();\n// In uncontrolled components, the form elements handle their own state without relying on React state (useState).\n// Instead of using useState, we use useRef to directly access the input field.\n// Key Points of Uncontrolled Components:\n// The input field maintains its own state, and we access its value using useRef.\n// There is no state update on every keystroke, making it more performant in some cases.\n// Useful for integrating with third-party libraries like DOM manipulation libraries.   \n\nimport { useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UncontrolledInput() {\n  _s();\n  const inputRef = useRef(null);\n  const handleSubmit = () => {\n    alert(\"Entered Text: \" + inputRef.current.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: inputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_s(UncontrolledInput, \"iD9XNNsNOlNDckBemnvlLS+aHYk=\");\n_c = UncontrolledInput;\nexport default UncontrolledInput;\nvar _c;\n$RefreshReg$(_c, \"UncontrolledInput\");","map":{"version":3,"names":["useRef","jsxDEV","_jsxDEV","UncontrolledInput","_s","inputRef","handleSubmit","alert","current","value","children","type","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Development/Reactjs/src/components/UncontrolledComponent.js"],"sourcesContent":["// In uncontrolled components, the form elements handle their own state without relying on React state (useState).\r\n// Instead of using useState, we use useRef to directly access the input field.\r\n// Key Points of Uncontrolled Components:\r\n// The input field maintains its own state, and we access its value using useRef.\r\n// There is no state update on every keystroke, making it more performant in some cases.\r\n// Useful for integrating with third-party libraries like DOM manipulation libraries.   \r\n\r\nimport { useRef } from \"react\";\r\n\r\nfunction UncontrolledInput() {\r\n  const inputRef = useRef(null);\r\n\r\n  const handleSubmit = () => {\r\n    alert(\"Entered Text: \" + inputRef.current.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" ref={inputRef} />\r\n      <button onClick={handleSubmit}>Submit</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UncontrolledInput;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAMC,QAAQ,GAAGL,MAAM,CAAC,IAAI,CAAC;EAE7B,MAAMM,YAAY,GAAGA,CAAA,KAAM;IACzBC,KAAK,CAAC,gBAAgB,GAAGF,QAAQ,CAACG,OAAO,CAACC,KAAK,CAAC;EAClD,CAAC;EAED,oBACEP,OAAA;IAAAQ,QAAA,gBACER,OAAA;MAAOS,IAAI,EAAC,MAAM;MAACC,GAAG,EAAEP;IAAS;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpCd,OAAA;MAAQe,OAAO,EAAEX,YAAa;MAAAI,QAAA,EAAC;IAAM;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV;AAACZ,EAAA,CAbQD,iBAAiB;AAAAe,EAAA,GAAjBf,iBAAiB;AAe1B,eAAeA,iBAAiB;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}