{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development\\\\Reactjs\\\\src\\\\components\\\\FunctionalComponent.js\",\n  _s = $RefreshSig$();\n// functional component, classs component\n// passing prop, default prop, prop check\n// conditional rendering( ternary operator, if, ampercend)\n// list and keys\n// useState, useReducer, useEffect, useRef, useContext, useCallback, useMemo\n// useCallback hook performence optimization technique\n// controlled and uncontrolled component\n// toggle\n// api call axios and useeffect (ajax call)\n// lazy loading\n// create form and show form data\n// custom hook (api calling)\n// Todo list\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RefExample = () => {\n  _s();\n  const [count, setCount] = useState(0);\n\n  // 1. Persist value between renders\n  const prevCountRef = useRef();\n\n  // 2. Store mutable value that doesn't cause re-render\n  const mutableRef = useRef(0);\n  useEffect(() => {\n    prevCountRef.current = count;\n  }, [count]);\n  const handleClick = () => {\n    setCount(count + 1); // This will cause a re-render\n    mutableRef.current += 1; // This will NOT cause a re-render\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Current Count: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Previous Count: \", prevCountRef.current]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Mutable Ref Value: \", mutableRef.current]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Increment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(RefExample, \"Hfi+Y81xPVlCOeBAYy3uGQUQaFc=\");\n_c = RefExample;\nexport default RefExample;\nvar _c;\n$RefreshReg$(_c, \"RefExample\");","map":{"version":3,"names":["React","useRef","useState","useEffect","jsxDEV","_jsxDEV","RefExample","_s","count","setCount","prevCountRef","mutableRef","current","handleClick","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Development/Reactjs/src/components/FunctionalComponent.js"],"sourcesContent":["// functional component, classs component\r\n// passing prop, default prop, prop check\r\n// conditional rendering( ternary operator, if, ampercend)\r\n// list and keys\r\n// useState, useReducer, useEffect, useRef, useContext, useCallback, useMemo\r\n// useCallback hook performence optimization technique\r\n// controlled and uncontrolled component\r\n// toggle\r\n// api call axios and useeffect (ajax call)\r\n// lazy loading\r\n// create form and show form data\r\n// custom hook (api calling)\r\n// Todo list\r\n\r\n\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\n\r\nconst RefExample = () => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  // 1. Persist value between renders\r\n  const prevCountRef = useRef();\r\n\r\n  // 2. Store mutable value that doesn't cause re-render\r\n  const mutableRef = useRef(0);\r\n\r\n  useEffect(() => {\r\n    prevCountRef.current = count;\r\n  }, [count]);\r\n\r\n  const handleClick = () => {\r\n    setCount(count + 1); // This will cause a re-render\r\n    mutableRef.current += 1; // This will NOT cause a re-render\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Current Count: {count}</h3>\r\n      <h4>Previous Count: {prevCountRef.current}</h4>\r\n      <h4>Mutable Ref Value: {mutableRef.current}</h4>\r\n\r\n      <button onClick={handleClick}>Increment</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RefExample;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;;EAErC;EACA,MAAMQ,YAAY,GAAGT,MAAM,CAAC,CAAC;;EAE7B;EACA,MAAMU,UAAU,GAAGV,MAAM,CAAC,CAAC,CAAC;EAE5BE,SAAS,CAAC,MAAM;IACdO,YAAY,CAACE,OAAO,GAAGJ,KAAK;EAC9B,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACxBJ,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;IACrBG,UAAU,CAACC,OAAO,IAAI,CAAC,CAAC,CAAC;EAC3B,CAAC;;EAED,oBACEP,OAAA;IAAAS,QAAA,gBACET,OAAA;MAAAS,QAAA,GAAI,iBAAe,EAACN,KAAK;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC/Bb,OAAA;MAAAS,QAAA,GAAI,kBAAgB,EAACJ,YAAY,CAACE,OAAO;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC/Cb,OAAA;MAAAS,QAAA,GAAI,qBAAmB,EAACH,UAAU,CAACC,OAAO;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEhDb,OAAA;MAAQc,OAAO,EAAEN,WAAY;MAAAC,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV,CAAC;AAACX,EAAA,CA3BID,UAAU;AAAAc,EAAA,GAAVd,UAAU;AA6BhB,eAAeA,UAAU;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}