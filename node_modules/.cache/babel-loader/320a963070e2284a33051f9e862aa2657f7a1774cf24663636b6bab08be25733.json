{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SH20313140\\\\Desktop\\\\Fullstack\\\\Reactjs\\\\src\\\\useEffectInReact.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction UseEffectHook() {\n  _s();\n  const [initial, update] = useState(0);\n  const [counter, updateCounter] = useState(0);\n  useEffect(() => {\n    console.log('Inside UseEffect');\n  }, [counter]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"useEffect in react js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), console.log('Inside Component these get first: 1'), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        update(initial + 1);\n      },\n      children: \"Click to update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        updateCounter(counter + 1);\n      },\n      children: \"Click to update Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(UseEffectHook, \"q/UO1IayveIXM13nUJNc8metpQ4=\");\n_c = UseEffectHook;\nexport default UseEffectHook;\n\n// so basically if we use without second argument array for useEffect it will get execute everytime after component render\n// \nvar _c;\n$RefreshReg$(_c, \"UseEffectHook\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","UseEffectHook","_s","initial","update","counter","updateCounter","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SH20313140/Desktop/Fullstack/Reactjs/src/useEffectInReact.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nfunction UseEffectHook() {\r\n\r\n    const [initial, update] = useState(0);\r\n    const [counter, updateCounter] = useState(0);\r\n\r\n    useEffect(() => {\r\n        console.log('Inside UseEffect');\r\n    }, [counter]\r\n    )\r\n    return (\r\n        <>\r\n            <h1>useEffect in react js</h1>\r\n            {console.log('Inside Component these get first: 1')}\r\n            <button onClick={() => {\r\n                update(initial + 1)\r\n            }}>Click to update</button>\r\n            <button onClick={() => {\r\n                updateCounter(counter + 1)\r\n            }}>Click to update Counter</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UseEffectHook;\r\n\r\n// so basically if we use without second argument array for useEffect it will get execute everytime after component render\r\n// "],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEjC,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EAErB,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACS,OAAO,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACZY,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EACnC,CAAC,EAAE,CAACH,OAAO,CACX,CAAC;EACD,oBACIP,OAAA,CAAAE,SAAA;IAAAS,QAAA,gBACIX,OAAA;MAAAW,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC7BN,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC,eACnDV,OAAA;MAAQgB,OAAO,EAAEA,CAAA,KAAM;QACnBV,MAAM,CAACD,OAAO,GAAG,CAAC,CAAC;MACvB,CAAE;MAAAM,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC3Bf,OAAA;MAAQgB,OAAO,EAAEA,CAAA,KAAM;QACnBR,aAAa,CAACD,OAAO,GAAG,CAAC,CAAC;MAC9B,CAAE;MAAAI,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACrC,CAAC;AAEX;AAACX,EAAA,CArBQD,aAAa;AAAAc,EAAA,GAAbd,aAAa;AAuBtB,eAAeA,aAAa;;AAE5B;AACA;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}