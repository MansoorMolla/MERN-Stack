{"ast":null,"code":"var _s = $RefreshSig$();\n// functional component, classs component\n// passing prop, default prop, prop check\n// conditional rendering( ternary operator, if, ampercend)\n// list and keys\n// useState, useReducer, useEffect, useRef, useContext, useCallback, useMemo\n// useCallback hook performence optimization technique\n// controlled and uncontrolled component\n// toggle\n// api call axios and useeffect (ajax call)\n// lazy loading\n// create form and show form data\n// custom hook (api calling)\n// Todo list\n\nimport React, { useState } from \"react\";\nconst useCounter = (initialValue = 0, step = 1) => {\n  _s();\n  let [count, setCount] = useState(initialValue);\n  const increment = () => setCount(prev => prev + step);\n  const decrement = () => setCount(prev => prev - step);\n  const reset = () => setCount(initialValue);\n  return {\n    count,\n    increment,\n    decrement,\n    reset\n  };\n};\n_s(useCounter, \"anQBWt8gm5Alpw27Xf2pPZffWFg=\");\nexport default useCounter;","map":{"version":3,"names":["React","useState","useCounter","initialValue","step","_s","count","setCount","increment","prev","decrement","reset"],"sources":["C:/Development/Reactjs/src/components/FunctionalComponent.js"],"sourcesContent":["// functional component, classs component\r\n// passing prop, default prop, prop check\r\n// conditional rendering( ternary operator, if, ampercend)\r\n// list and keys\r\n// useState, useReducer, useEffect, useRef, useContext, useCallback, useMemo\r\n// useCallback hook performence optimization technique\r\n// controlled and uncontrolled component\r\n// toggle\r\n// api call axios and useeffect (ajax call)\r\n// lazy loading\r\n// create form and show form data\r\n// custom hook (api calling)\r\n// Todo list\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\n\r\n\r\nconst useCounter = (initialValue = 0, step = 1) => {\r\n    let [count, setCount] = useState(initialValue)\r\n\r\n    const increment = () => setCount(prev => prev + step);\r\n    const decrement = () => setCount(prev => prev - step);\r\n    const reset = () => setCount(initialValue);\r\n    return { count, increment, decrement, reset };\r\n}\r\n\r\nexport default useCounter;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAGvC,MAAMC,UAAU,GAAGA,CAACC,YAAY,GAAG,CAAC,EAAEC,IAAI,GAAG,CAAC,KAAK;EAAAC,EAAA;EAC/C,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAACE,YAAY,CAAC;EAE9C,MAAMK,SAAS,GAAGA,CAAA,KAAMD,QAAQ,CAACE,IAAI,IAAIA,IAAI,GAAGL,IAAI,CAAC;EACrD,MAAMM,SAAS,GAAGA,CAAA,KAAMH,QAAQ,CAACE,IAAI,IAAIA,IAAI,GAAGL,IAAI,CAAC;EACrD,MAAMO,KAAK,GAAGA,CAAA,KAAMJ,QAAQ,CAACJ,YAAY,CAAC;EAC1C,OAAO;IAAEG,KAAK;IAAEE,SAAS;IAAEE,SAAS;IAAEC;EAAM,CAAC;AACjD,CAAC;AAAAN,EAAA,CAPKH,UAAU;AAShB,eAAeA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}