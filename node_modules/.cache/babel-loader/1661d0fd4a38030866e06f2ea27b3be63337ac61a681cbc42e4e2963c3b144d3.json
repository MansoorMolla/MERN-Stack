{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development\\\\Reactjs\\\\src\\\\components\\\\ControlledComponent.js\",\n  _s = $RefreshSig$();\n// Controlled Components\n// In controlled components, the form elements (like input, textarea, etc.) are controlled by the component state using React’s useState or useReducer.\n// The input value is stored in the state, and any change in the input is handled by the onChange event to update the state.\n// Key Points of Controlled Components:\n// The value of the input field is always controlled by the state (useState).\n// The onChange event updates the state every time the user types something.\n// React has full control over the input field, making it easy to manage form validation and behavior.\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ControlledInput() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const handleChange = event => {\n    setText(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: text,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Entered Text: \", text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_s(ControlledInput, \"3t0DFnMi16eB/7p7iIKtjG5r68g=\");\n_c = ControlledInput;\nexport default ControlledInput;\nvar _c;\n$RefreshReg$(_c, \"ControlledInput\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","ControlledInput","_s","text","setText","handleChange","event","target","value","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Development/Reactjs/src/components/ControlledComponent.js"],"sourcesContent":["// Controlled Components\r\n// In controlled components, the form elements (like input, textarea, etc.) are controlled by the component state using React’s useState or useReducer.\r\n// The input value is stored in the state, and any change in the input is handled by the onChange event to update the state.\r\n// Key Points of Controlled Components:\r\n// The value of the input field is always controlled by the state (useState).\r\n// The onChange event updates the state every time the user types something.\r\n// React has full control over the input field, making it easy to manage form validation and behavior.\r\n\r\nimport { useState } from \"react\";\r\n\r\nfunction ControlledInput() {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" value={text} onChange={handleChange} />\r\n      <p>Entered Text: {text}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ControlledInput;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMO,YAAY,GAAIC,KAAK,IAAK;IAC9BF,OAAO,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;EAED,oBACER,OAAA;IAAAS,QAAA,gBACET,OAAA;MAAOU,IAAI,EAAC,MAAM;MAACF,KAAK,EAAEL,IAAK;MAACQ,QAAQ,EAAEN;IAAa;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1Df,OAAA;MAAAS,QAAA,GAAG,gBAAc,EAACN,IAAI;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEV;AAACb,EAAA,CAbQD,eAAe;AAAAe,EAAA,GAAff,eAAe;AAexB,eAAeA,eAAe;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}