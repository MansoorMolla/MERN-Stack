{"ast":null,"code":"// functional component, classs component\n// passing prop, default prop, prop check\n// conditional rendering( ternary operator, if, ampercend)\n// list and keys\n// useState, useReducer, useEffect, useRef, useContext, useCallback, useMemo\n// controlled and uncontrolled component\n// api call axios and useeffect (ajax call)\n// create form and show form data\n// custom hook (api calling)\n// toggle\n// lazy loading\n\n// import React, { useState, useEffect } from \"react\";\n\n// const useFetch = (url) => {\n//     let [data, setData] = useState(null)\n//     let [error, setError] = useState(null)\n//     let [loading, setLoading] = useState(true)\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 let response = await fetch(url)\n//                 if (!response.ok) throw new Error('Error Getting Data')\n//                 let result = await response.json()\n//                 setData(result)\n//             } catch (error) {\n//                 setError(error.message)\n//             } finally {\n//                 setLoading(false)\n//             }\n//         }\n//         fetchData()\n//     }, [url])\n//     return { data, error, loading }\n// }\n// export default FC;","map":{"version":3,"names":[],"sources":["C:/Development/Reactjs/src/components/FunctionalComponent.js"],"sourcesContent":["// functional component, classs component\r\n// passing prop, default prop, prop check\r\n// conditional rendering( ternary operator, if, ampercend)\r\n// list and keys\r\n// useState, useReducer, useEffect, useRef, useContext, useCallback, useMemo\r\n// controlled and uncontrolled component\r\n// api call axios and useeffect (ajax call)\r\n// create form and show form data\r\n// custom hook (api calling)\r\n// toggle\r\n// lazy loading\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n\r\n// const useFetch = (url) => {\r\n//     let [data, setData] = useState(null)\r\n//     let [error, setError] = useState(null)\r\n//     let [loading, setLoading] = useState(true)\r\n\r\n//     useEffect(() => {\r\n//         const fetchData = async () => {\r\n//             try {\r\n//                 let response = await fetch(url)\r\n//                 if (!response.ok) throw new Error('Error Getting Data')\r\n//                 let result = await response.json()\r\n//                 setData(result)\r\n//             } catch (error) {\r\n//                 setError(error.message)\r\n//             } finally {\r\n//                 setLoading(false)\r\n//             }\r\n//         }\r\n//         fetchData()\r\n//     }, [url])\r\n//     return { data, error, loading }\r\n// }\r\n// export default FC;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}