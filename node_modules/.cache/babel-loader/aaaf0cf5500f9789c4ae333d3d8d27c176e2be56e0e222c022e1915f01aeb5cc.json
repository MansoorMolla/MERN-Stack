{"ast":null,"code":"var _s = $RefreshSig$();\n// Custom Hooks in React (With API Call Example)\n// A custom hook in React is a reusable function that extracts and shares logic between multiple components. It follows the naming convention of starting with use, like useFetchData.\n\n// Why Use Custom Hooks?\n// Helps in code reusability (avoids duplication).\n// Makes components cleaner by separating logic from UI.\n// Allows better organization of side effects (like API calls).\n\nimport { useState, useEffect } from \"react\";\nfunction useFetch(url) {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let response = await fetch(url);\n        if (!response.ok) throw new Error(\"Error fetching data\");\n        let result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [url]);\n  return {\n    data,\n    loading,\n    error\n  };\n}\n_s(useFetch, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\nexport default useFetch;\n\n// import useFetch from \"./useFetch\";\n\n// function DataComponent() {\n//   const { data, loading, error } = useFetch(\"https://jsonplaceholder.typicode.com/posts\");\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>Error: {error}</p>;\n\n//   return (\n//     <ul>\n//       {data.map((post) => (\n//         <li key={post.id}>{post.title}</li>\n//       ))}\n//     </ul>\n//   );\n// }\n\n// export default DataComponent;\n\n// How This Works?\n// useFetch accepts a url as an argument.\n// Inside the hook:\n// useState manages the API response (data), loading state (loading), and errors (error).\n// useEffect fetches data when the component mounts or when the URL changes.\n// It returns { data, loading, error }, which can be used in any component.\n// In the DataComponent, we call useFetch(url) to get the API data.\n// Advantages of Using Custom Hooks\n// ✅ Makes components clean and focused only on UI.\n// ✅ Reusability: We can use useFetch anywhere without rewriting API logic.\n// ✅ Separation of concerns: Keeps API logic outside components, making it easier to maintain.","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","data","setData","loading","setLoading","error","setError","fetchData","response","fetch","ok","Error","result","json","err","message"],"sources":["C:/Development/Reactjs/src/Utils/customHook.js"],"sourcesContent":["// Custom Hooks in React (With API Call Example)\r\n// A custom hook in React is a reusable function that extracts and shares logic between multiple components. It follows the naming convention of starting with use, like useFetchData.\r\n\r\n// Why Use Custom Hooks?\r\n// Helps in code reusability (avoids duplication).\r\n// Makes components cleaner by separating logic from UI.\r\n// Allows better organization of side effects (like API calls).\r\n\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction useFetch(url) {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        let response = await fetch(url);\r\n        if (!response.ok) throw new Error(\"Error fetching data\");\r\n        let result = await response.json();\r\n        setData(result);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { data, loading, error };\r\n}\r\n\r\nexport default useFetch;\r\n\r\n\r\n// import useFetch from \"./useFetch\";\r\n\r\n// function DataComponent() {\r\n//   const { data, loading, error } = useFetch(\"https://jsonplaceholder.typicode.com/posts\");\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n//   if (error) return <p>Error: {error}</p>;\r\n\r\n//   return (\r\n//     <ul>\r\n//       {data.map((post) => (\r\n//         <li key={post.id}>{post.title}</li>\r\n//       ))}\r\n//     </ul>\r\n//   );\r\n// }\r\n\r\n// export default DataComponent;\r\n\r\n\r\n\r\n// How This Works?\r\n// useFetch accepts a url as an argument.\r\n// Inside the hook:\r\n// useState manages the API response (data), loading state (loading), and errors (error).\r\n// useEffect fetches data when the component mounts or when the URL changes.\r\n// It returns { data, loading, error }, which can be used in any component.\r\n// In the DataComponent, we call useFetch(url) to get the API data.\r\n// Advantages of Using Custom Hooks\r\n// ✅ Makes components clean and focused only on UI.\r\n// ✅ Reusability: We can use useFetch anywhere without rewriting API logic.\r\n// ✅ Separation of concerns: Keeps API logic outside components, making it easier to maintain."],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAGA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,QAAQA,CAACC,GAAG,EAAE;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACV,GAAG,CAAC;QAC/B,IAAI,CAACS,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;QACxD,IAAIC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCX,OAAO,CAACU,MAAM,CAAC;MACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZR,QAAQ,CAACQ,GAAG,CAACC,OAAO,CAAC;MACvB,CAAC,SAAS;QACRX,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC;EAET,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC;AAACL,EAAA,CAvBQF,QAAQ;AAyBjB,eAAeA,QAAQ;;AAGvB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}