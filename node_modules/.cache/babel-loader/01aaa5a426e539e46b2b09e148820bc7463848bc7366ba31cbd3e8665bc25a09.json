{"ast":null,"code":"var _s = $RefreshSig$();\n// functional component, classs component\n// passing prop, default prop, prop check\n// conditional rendering( ternary operator, if, ampercend)\n// list and keys\n// useState, useReducer, useEffect, useRef, useContext, useCallback, useMemo\n// controlled and uncontrolled component\n// api call axios and useeffect (ajax call)\n// create form and show form data\n// custom hook (api calling)\n// toggle\n// lazy loading\n// useCallback hook performence optimization technique\n\nimport React, { useReducer } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reducerFunction = (state, action) => {\n  if (action.type === 'RES') return 0;\n  return state + action;\n};\nconst FC = () => {\n  _s();\n  let [count, dispatch] = useReducer(reducerFunction, 0);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(FC, \"liV/BQV6CNHjKwIp3lC+ZlJzhnY=\");\n_c = FC;\nexport default FC;\nvar _c;\n$RefreshReg$(_c, \"FC\");","map":{"version":3,"names":["React","useReducer","Fragment","_Fragment","jsxDEV","_jsxDEV","reducerFunction","state","action","type","FC","_s","count","dispatch","_c","$RefreshReg$"],"sources":["C:/Development/Reactjs/src/components/FunctionalComponent.js"],"sourcesContent":["// functional component, classs component\r\n// passing prop, default prop, prop check\r\n// conditional rendering( ternary operator, if, ampercend)\r\n// list and keys\r\n// useState, useReducer, useEffect, useRef, useContext, useCallback, useMemo\r\n// controlled and uncontrolled component\r\n// api call axios and useeffect (ajax call)\r\n// create form and show form data\r\n// custom hook (api calling)\r\n// toggle\r\n// lazy loading\r\n// useCallback hook performence optimization technique\r\n\r\n\r\n\r\nimport React, {useReducer} from \"react\";\r\n\r\nconst reducerFunction = (state, action) =>{\r\n    if(action.type === 'RES') return 0;\r\n    return state + action\r\n}\r\nconst FC = () => {\r\n    let [count, dispatch] = useReducer(reducerFunction, 0)\r\n    return(\r\n        <>\r\n        \r\n        </>\r\n    )\r\n}\r\nexport default FC"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,IAAGC,UAAU,QAAO,OAAO;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,eAAe,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAI;EACtC,IAAGA,MAAM,CAACC,IAAI,KAAK,KAAK,EAAE,OAAO,CAAC;EAClC,OAAOF,KAAK,GAAGC,MAAM;AACzB,CAAC;AACD,MAAME,EAAE,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACb,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,UAAU,CAACK,eAAe,EAAE,CAAC,CAAC;EACtD,oBACID,OAAA,CAAAF,SAAA,mBAEE,CAAC;AAEX,CAAC;AAAAQ,EAAA,CAPKD,EAAE;AAAAI,EAAA,GAAFJ,EAAE;AAQR,eAAeA,EAAE;AAAA,IAAAI,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}