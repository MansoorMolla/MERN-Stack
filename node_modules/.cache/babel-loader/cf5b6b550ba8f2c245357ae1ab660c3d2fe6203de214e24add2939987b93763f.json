{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SH20313140\\\\Desktop\\\\Fullstack\\\\CRASHCOURSE_MERN\\\\Reactjs\\\\src\\\\components\\\\FunctionalComponent.js\",\n  _s = $RefreshSig$();\n// function FC() {\n//     return (\n//         <h1>These is react functional component</h1>\n//     )\n// }\n\n// export default FC;\n\n// hooks, making a api call, form data\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FC = () => {\n  _s();\n  let [count, setCount] = useState(0);\n  let [dependency, setDependency] = useState(0);\n  useEffect(() => {\n    console.log('These gets logged when dependency updated');\n  }, [dependency]);\n  // [] => if empty array then only gets rendered at first time\n  // if no second argument everytime when state rendered\n  // if given second arg and given some var then will update everytime when that updated\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"count:\", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {},\n      children: \"INC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(FC, \"PCxFtgxuQDSMuJVpaXmOSHv9D/Q=\");\n_c = FC;\nexport default FC;\nvar _c;\n$RefreshReg$(_c, \"FC\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","FC","_s","count","setCount","dependency","setDependency","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SH20313140/Desktop/Fullstack/CRASHCOURSE_MERN/Reactjs/src/components/FunctionalComponent.js"],"sourcesContent":["// function FC() {\r\n//     return (\r\n//         <h1>These is react functional component</h1>\r\n//     )\r\n// }\r\n\r\n// export default FC;\r\n\r\n\r\n// hooks, making a api call, form data\r\n\r\nimport React, {useEffect, useState} from \"react\";\r\n\r\nconst FC = () =>{\r\n    let [count, setCount] = useState(0);\r\n    let [dependency, setDependency] = useState(0);\r\n\r\n    useEffect(() => {\r\n        console.log('These gets logged when dependency updated');\r\n    }, [dependency]);\r\n    // [] => if empty array then only gets rendered at first time\r\n    // if no second argument everytime when state rendered\r\n    // if given second arg and given some var then will update everytime when that updated\r\n    return(\r\n        <>\r\n        <h1>count:{count}</h1>\r\n        <button onClick={()=>{\r\n            \r\n        }}>INC</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FC;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEjD,MAAMC,EAAE,GAAGA,CAAA,KAAK;EAAAC,EAAA;EACZ,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACnC,IAAI,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACZY,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;EAC5D,CAAC,EAAE,CAACH,UAAU,CAAC,CAAC;EAChB;EACA;EACA;EACA,oBACIP,OAAA,CAAAE,SAAA;IAAAS,QAAA,gBACAX,OAAA;MAAAW,QAAA,GAAI,QAAM,EAACN,KAAK;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACtBf,OAAA;MAAQgB,OAAO,EAAEA,CAAA,KAAI,CAErB,CAAE;MAAAL,QAAA,EAAC;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACb,CAAC;AAEX,CAAC;AAAAX,EAAA,CAlBKD,EAAE;AAAAc,EAAA,GAAFd,EAAE;AAoBR,eAAeA,EAAE;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}